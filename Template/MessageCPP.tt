<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//Generated by Grpc CodeGenerator for Unreal, do not edit!
#include "<#=s.TurboLinkBasicFileName#>Message.h"
<#
if(g.GenerateJsonCode) {
#>
#include "<#=s.TurboLinkBasicFileName#>Marshaling.h"
#include "google/protobuf/util/json_util.h"

<#
foreach(GrpcMessage message in s.MessageArray) {
if(!(message is GrpcMessage_Oneof)) {
#>
DEFINE_JSON_FUNCTIONS(<#=message.Name#>, ::<#=message.GrpcName#>)
<#}}}#>

<# 
foreach(GrpcMessage message in s.MessageArray)
{
if(message.HasNativeMake || message is GrpcMessage_Oneof)
{
#>
<#=message.Name#> U<#=message.Name.Substring(1)#>HelperLibrary::Make<#=message.CamelName#>(<#if(message is GrpcMessage_Oneof){ GrpcMessage_Oneof oneofMessage = (GrpcMessage_Oneof)message; #><#=oneofMessage.OneofEnum.Name#> <#=oneofMessage.CamelName#>Case, 
<#}else{#> 
<#}#>    <#
for(int index=0; index<message.Fields.Count; index++){
GrpcMessageField field = message.Fields[index];
#><#=field.FieldType#> <#=field.FieldName#><#
if(index==(message.Fields.Count-1)){#> 
<#}else if((index+1)%3==0){#>, 
    <#}else{#>, <#}}#>
)
{
    <#=message.Name#> <#=message.CamelName#>;
<#
if(message is GrpcMessage_Oneof) { 
    GrpcMessage_Oneof oneofMessage = (GrpcMessage_Oneof)message; 
#>
    <#=message.CamelName#>.<#=oneofMessage.CamelName#>Case = <#=oneofMessage.CamelName#>Case;
<#}#>
<#for(int index=0; index<message.Fields.Count; index++){
GrpcMessageField field = message.Fields[index];
#>
<#if(field.NeedNativeMake) {#>
<#
if(field is GrpcMessageField_Map){
GrpcMessageField_Map mapField = (GrpcMessageField_Map)field;
#>
    for (const auto& element : <#=field.FieldName#>)
    {
        <#=message.CamelName#>.<#=field.FieldName#>.Add(element.Key, MakeShareable(new <#=mapField.ValueField.FieldType#>(element.Value)));
    }
<#
}else if(field is GrpcMessageField_Repeated) {
GrpcMessageField_Repeated repeatedField = (GrpcMessageField_Repeated)field;
#>
    for (const auto& element : <#=field.FieldName#>)
    {
        <#=message.CamelName#>.<#=field.FieldName#>.Add(MakeShareable(new <#=repeatedField.ItemField.FieldType#>(element)));
    }
<#}else{#>
    <#=message.CamelName#>.<#=field.FieldName#> = MakeShareable(new <#=field.FieldType#>(<#=field.FieldName#>));
<#}#>
<#}else{#>
    <#=message.CamelName#>.<#=field.FieldName#> = <#=field.FieldName#>;
<#}}#>

    return <#=message.CamelName#>;
}

void U<#=message.Name.Substring(1)#>HelperLibrary::Break<#=message.CamelName#>(const <#=message.Name#>& <#=message.CamelName#>, <#if(message is GrpcMessage_Oneof){ GrpcMessage_Oneof oneofMessage = (GrpcMessage_Oneof)message; #><#=oneofMessage.OneofEnum.Name#>& <#=oneofMessage.CamelName#>Case, 
<#}else{#> 
<#}#>    <#
for(int index=0; index<message.Fields.Count; index++){
GrpcMessageField field = message.Fields[index];
#><#=field.FieldType#>& <#=field.FieldName#><#
if(index==(message.Fields.Count-1)){#> 
<#}else if((index+1)%3==0){#>, 
    <#}else{#>, <#}}#>
)
{
<#
if(message is GrpcMessage_Oneof) { 
    GrpcMessage_Oneof oneofMessage = (GrpcMessage_Oneof)message; 
#>
    <#=oneofMessage.CamelName#>Case = <#=message.CamelName#>.<#=oneofMessage.CamelName#>Case;
<#}#>
<#for(int index=0; index<message.Fields.Count; index++){
GrpcMessageField field = message.Fields[index];
#>
<#if(field.NeedNativeMake) {#>
<#
if(field is GrpcMessageField_Map){
GrpcMessageField_Map mapField = (GrpcMessageField_Map)field;
#>
    for (auto& element : <#=message.CamelName#>.<#=field.FieldName#>)
    {
        <#=field.FieldName#>.Add(element.Key, *(element.Value.Get()));
    }
<#
}else if(field is GrpcMessageField_Repeated) {
GrpcMessageField_Repeated repeatedField = (GrpcMessageField_Repeated)field;
#>
    for (auto& element : <#=message.CamelName#>.<#=field.FieldName#>)
    {
        <#=field.FieldName#>.Add(*(element.Get()));
    }
<#}else{#>
    if(<#=message.CamelName#>.<#=field.FieldName#>.Get()) 
    {
        <#=field.FieldName#> = *(<#=message.CamelName#>.<#=field.FieldName#>.Get());
    }
<#}#>
<#}else{#>
    <#=field.FieldName#> = <#=message.CamelName#>.<#=field.FieldName#>;
<#}}#>
}

<#}}#>
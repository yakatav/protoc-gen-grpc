<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by Grpc CodeGenerator for Unreal, do not edit!
#pragma once

#include "<#=s.TurboLinkBasicFileName#>Service.h"
#include "TurboLinkGrpcManager_Private.h"
#include "<#=System.IO.Path.ChangeExtension(s.FileName, "grpc.pb.h")#>"
<#
if(s.ServiceArray.Count>0) {
#>
#include "<#=s.CamelFileName#>Service_Private.generated.h"
<# 
} 
#>

<#
foreach(GrpcService service in s.ServiceArray)
{
#>
class U<#=service.Name#>::Private
{
public:
	std::shared_ptr<UTurboLinkGrpcManager::Private::ServiceChannel> Channel;
	std::unique_ptr<::<#=s.GrpcPackageName#>::<#=service.Name#>::Stub> Stub;
};

<#
}
#>

<#
foreach(GrpcService service in s.ServiceArray)
{
	foreach (GrpcServiceMethod method in service.MethodArray)
	{
		if(!method.ClientStreaming) {
#>
UCLASS()
class U<#=service.Name#><#=method.Name#>LambdaWrapper : public UObject
{
	GENERATED_BODY()
public:
	UPROPERTY()
	U<#=service.Name#>Client* InnerClient;

	UFUNCTION()
	void OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const <#=method.OutputType#>& Response);
<#
if(method.ServerStreaming) 
{
#>
	UFUNCTION()
	void OnContextStateChanged(FGrpcContextHandle Handle, EGrpcContextState NewState);
<#
}
#>
public:
	FGrpcContextHandle Handle;
	U<#=service.Name#>::F<#=method.Name#>ResponseLambda ResponseLambda;
<#
if(method.ServerStreaming) {
#>
	U<#=service.Name#>::F<#=method.Name#>FinishLambda FinishLambda;
<# } #>
};

<#
		}
	}
}
#>

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by Grpc CodeGenerator for Unreal, do not edit!
#pragma once
#include "<#=s.TurboLinkBasicFileName#>Message.h"
<# if(g.GenerateServiceCode) {#>
#include "TurboLinkGrpcContext.h"
<#}#>
<# if(g.GenerateServiceCode && s.ServiceArray.Count>0) {#>
#include "<#=System.IO.Path.ChangeExtension(s.FileName, "grpc.pb.h")#>"
<#} else {#>
#include "<#=System.IO.Path.ChangeExtension(s.FileName, "pb.h")#>"
<#}#>

<# 
foreach(GrpcMessage message in s.MessageArray) {
	if(message is GrpcMessage_Oneof) continue;
#>
void GRPC_TO_TURBOLINK(const ::<#=message.GrpcName#>* in, <#=message.Name#>* out);
void TURBOLINK_TO_GRPC(const <#=message.Name#>* in, ::<#=message.GrpcName#>* out);

<#}#>
<#
if(g.GenerateServiceCode) {
foreach(GrpcService service in s.ServiceArray)
{
	foreach (GrpcServiceMethod method in service.MethodArray)
	{
#>
<#if(method.ClientStreaming && method.ServerStreaming) { #>
typedef grpc::ClientAsyncReaderWriter<<#=method.GrpcInputType#>, <#=method.GrpcOutputType#>> <#=service.Name#>_<#=method.Name#>_ReaderWriter;
<# }else if(method.ClientStreaming && !method.ServerStreaming) { #>
typedef grpc::ClientAsyncWriter<<#=method.GrpcInputType#>> <#=service.Name#>_<#=method.Name#>_ReaderWriter;
<# } else if(!method.ClientStreaming && method.ServerStreaming) { #>
typedef grpc::ClientAsyncReader<<#=method.GrpcOutputType#>> <#=service.Name#>_<#=method.Name#>_ReaderWriter;
<#} else {#>
typedef grpc::ClientAsyncResponseReader<<#=method.GrpcOutputType#>> <#=service.Name#>_<#=method.Name#>_ReaderWriter;
<#}#>
<# }}} #>

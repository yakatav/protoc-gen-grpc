<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by Grpc CodeGenerator for Unreal, do not edit!
#pragma once
#include "TurboLinkGrpcContext.h"
#include "<#=s.TurboLinkBasicFileName#>Message.h"
#include "<#=s.TurboLinkBasicFileName#>Marshaling.h"
<#
foreach(GrpcService service in s.ServiceArray)
{
	foreach (GrpcServiceMethod method in service.MethodArray)
	{
		string superClass = method.ContextSuperClass;
		superClass += "<" + service.Name + "_" + method.Name + "_ReaderWriter, " + method.GrpcOutputType;
		if (method.ClientStreaming)
			superClass += ", " + method.GrpcInputType;
		superClass += ">";
#>
class GrpcContext_<#=service.Name#>_<#=method.Name#> : public <#=superClass#>
{
	friend class U<#=service.Name#>Client;
	typedef <#=superClass#> Super;

private:
<#
if(method.ClientStreaming) {
#>
	void Init();
<#}#>
	void Call(const <#=method.InputType#>& Request);
<#
if(method.ClientStreaming && !method.ServerStreaming) {
#>
	void Stop();
<#}#>
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_<#=service.Name#>_<#=method.Name#>(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

<#
	}
}
#>